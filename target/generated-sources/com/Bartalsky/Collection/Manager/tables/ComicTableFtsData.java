/*
 * This file is generated by jOOQ.
 */
package com.Bartalsky.Collection.Manager.tables;


import com.Bartalsky.Collection.Manager.DefaultSchema;
import com.Bartalsky.Collection.Manager.tables.records.ComicTableFtsDataRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ComicTableFtsData extends TableImpl<ComicTableFtsDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Comic_Table_fts_data</code>
     */
    public static final ComicTableFtsData COMIC_TABLE_FTS_DATA = new ComicTableFtsData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComicTableFtsDataRecord> getRecordType() {
        return ComicTableFtsDataRecord.class;
    }

    /**
     * The column <code>Comic_Table_fts_data.id</code>.
     */
    public final TableField<ComicTableFtsDataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Comic_Table_fts_data.block</code>.
     */
    public final TableField<ComicTableFtsDataRecord, byte[]> BLOCK = createField(DSL.name("block"), SQLDataType.BLOB, this, "");

    private ComicTableFtsData(Name alias, Table<ComicTableFtsDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComicTableFtsData(Name alias, Table<ComicTableFtsDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Comic_Table_fts_data</code> table reference
     */
    public ComicTableFtsData(String alias) {
        this(DSL.name(alias), COMIC_TABLE_FTS_DATA);
    }

    /**
     * Create an aliased <code>Comic_Table_fts_data</code> table reference
     */
    public ComicTableFtsData(Name alias) {
        this(alias, COMIC_TABLE_FTS_DATA);
    }

    /**
     * Create a <code>Comic_Table_fts_data</code> table reference
     */
    public ComicTableFtsData() {
        this(DSL.name("Comic_Table_fts_data"), null);
    }

    public <O extends Record> ComicTableFtsData(Table<O> child, ForeignKey<O, ComicTableFtsDataRecord> key) {
        super(child, key, COMIC_TABLE_FTS_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ComicTableFtsData as(String alias) {
        return new ComicTableFtsData(DSL.name(alias), this);
    }

    @Override
    public ComicTableFtsData as(Name alias) {
        return new ComicTableFtsData(alias, this);
    }

    @Override
    public ComicTableFtsData as(Table<?> alias) {
        return new ComicTableFtsData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComicTableFtsData rename(String name) {
        return new ComicTableFtsData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComicTableFtsData rename(Name name) {
        return new ComicTableFtsData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComicTableFtsData rename(Table<?> name) {
        return new ComicTableFtsData(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
