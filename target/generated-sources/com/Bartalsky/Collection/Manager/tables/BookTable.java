/*
 * This file is generated by jOOQ.
 */
package com.Bartalsky.Collection.Manager.tables;


import com.Bartalsky.Collection.Manager.DefaultSchema;
import com.Bartalsky.Collection.Manager.Indexes;
import com.Bartalsky.Collection.Manager.tables.records.BookTableRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookTable extends TableImpl<BookTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Book_Table</code>
     */
    public static final BookTable BOOK_TABLE = new BookTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookTableRecord> getRecordType() {
        return BookTableRecord.class;
    }

    /**
     * The column <code>Book_Table.ID</code>.
     */
    public final TableField<BookTableRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Book_Table.Buch</code>.
     */
    public final TableField<BookTableRecord, String> BUCH = createField(DSL.name("Buch"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Book_Table.Ort</code>.
     */
    public final TableField<BookTableRecord, String> ORT = createField(DSL.name("Ort"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Book_Table.Verlag</code>.
     */
    public final TableField<BookTableRecord, String> VERLAG = createField(DSL.name("Verlag"), SQLDataType.CLOB, this, "");

    private BookTable(Name alias, Table<BookTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookTable(Name alias, Table<BookTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Book_Table</code> table reference
     */
    public BookTable(String alias) {
        this(DSL.name(alias), BOOK_TABLE);
    }

    /**
     * Create an aliased <code>Book_Table</code> table reference
     */
    public BookTable(Name alias) {
        this(alias, BOOK_TABLE);
    }

    /**
     * Create a <code>Book_Table</code> table reference
     */
    public BookTable() {
        this(DSL.name("Book_Table"), null);
    }

    public <O extends Record> BookTable(Table<O> child, ForeignKey<O, BookTableRecord> key) {
        super(child, key, BOOK_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BOOK_INDEX);
    }

    @Override
    public BookTable as(String alias) {
        return new BookTable(DSL.name(alias), this);
    }

    @Override
    public BookTable as(Name alias) {
        return new BookTable(alias, this);
    }

    @Override
    public BookTable as(Table<?> alias) {
        return new BookTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(String name) {
        return new BookTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(Name name) {
        return new BookTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTable rename(Table<?> name) {
        return new BookTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
