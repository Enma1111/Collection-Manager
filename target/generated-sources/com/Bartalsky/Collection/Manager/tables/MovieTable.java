/*
 * This file is generated by jOOQ.
 */
package com.Bartalsky.Collection.Manager.tables;


import com.Bartalsky.Collection.Manager.DefaultSchema;
import com.Bartalsky.Collection.Manager.Indexes;
import com.Bartalsky.Collection.Manager.tables.records.MovieTableRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MovieTable extends TableImpl<MovieTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Movie_Table</code>
     */
    public static final MovieTable MOVIE_TABLE = new MovieTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieTableRecord> getRecordType() {
        return MovieTableRecord.class;
    }

    /**
     * The column <code>Movie_Table.ID</code>.
     */
    public final TableField<MovieTableRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Movie_Table.Film</code>.
     */
    public final TableField<MovieTableRecord, String> FILM = createField(DSL.name("Film"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Movie_Table.Hauptdarsteller</code>.
     */
    public final TableField<MovieTableRecord, String> HAUPTDARSTELLER = createField(DSL.name("Hauptdarsteller"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Movie_Table.Ort</code>.
     */
    public final TableField<MovieTableRecord, String> ORT = createField(DSL.name("Ort"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Movie_Table.Vertrieb</code>.
     */
    public final TableField<MovieTableRecord, String> VERTRIEB = createField(DSL.name("Vertrieb"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Movie_Table.Format</code>.
     */
    public final TableField<MovieTableRecord, String> FORMAT = createField(DSL.name("Format"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'DVD'"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>Movie_Table.Doppelt</code>.
     */
    public final TableField<MovieTableRecord, String> DOPPELT = createField(DSL.name("Doppelt"), SQLDataType.CLOB, this, "");

    private MovieTable(Name alias, Table<MovieTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieTable(Name alias, Table<MovieTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Movie_Table</code> table reference
     */
    public MovieTable(String alias) {
        this(DSL.name(alias), MOVIE_TABLE);
    }

    /**
     * Create an aliased <code>Movie_Table</code> table reference
     */
    public MovieTable(Name alias) {
        this(alias, MOVIE_TABLE);
    }

    /**
     * Create a <code>Movie_Table</code> table reference
     */
    public MovieTable() {
        this(DSL.name("Movie_Table"), null);
    }

    public <O extends Record> MovieTable(Table<O> child, ForeignKey<O, MovieTableRecord> key) {
        super(child, key, MOVIE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MOVIE_INDEX);
    }

    @Override
    public MovieTable as(String alias) {
        return new MovieTable(DSL.name(alias), this);
    }

    @Override
    public MovieTable as(Name alias) {
        return new MovieTable(alias, this);
    }

    @Override
    public MovieTable as(Table<?> alias) {
        return new MovieTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieTable rename(String name) {
        return new MovieTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieTable rename(Name name) {
        return new MovieTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieTable rename(Table<?> name) {
        return new MovieTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
