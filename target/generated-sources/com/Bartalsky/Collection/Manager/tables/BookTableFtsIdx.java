/*
 * This file is generated by jOOQ.
 */
package com.Bartalsky.Collection.Manager.tables;


import com.Bartalsky.Collection.Manager.DefaultSchema;
import com.Bartalsky.Collection.Manager.tables.records.BookTableFtsIdxRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookTableFtsIdx extends TableImpl<BookTableFtsIdxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Book_Table_fts_idx</code>
     */
    public static final BookTableFtsIdx BOOK_TABLE_FTS_IDX = new BookTableFtsIdx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookTableFtsIdxRecord> getRecordType() {
        return BookTableFtsIdxRecord.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<BookTableFtsIdxRecord, Object> SEGID = createField(DSL.name("segid"), org.jooq.impl.DefaultDataType.getDefaultDataType("").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<BookTableFtsIdxRecord, Object> TERM = createField(DSL.name("term"), org.jooq.impl.DefaultDataType.getDefaultDataType("").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<BookTableFtsIdxRecord, Object> PGNO = createField(DSL.name("pgno"), org.jooq.impl.DefaultDataType.getDefaultDataType(""), this, "");

    private BookTableFtsIdx(Name alias, Table<BookTableFtsIdxRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookTableFtsIdx(Name alias, Table<BookTableFtsIdxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Book_Table_fts_idx</code> table reference
     */
    public BookTableFtsIdx(String alias) {
        this(DSL.name(alias), BOOK_TABLE_FTS_IDX);
    }

    /**
     * Create an aliased <code>Book_Table_fts_idx</code> table reference
     */
    public BookTableFtsIdx(Name alias) {
        this(alias, BOOK_TABLE_FTS_IDX);
    }

    /**
     * Create a <code>Book_Table_fts_idx</code> table reference
     */
    public BookTableFtsIdx() {
        this(DSL.name("Book_Table_fts_idx"), null);
    }

    public <O extends Record> BookTableFtsIdx(Table<O> child, ForeignKey<O, BookTableFtsIdxRecord> key) {
        super(child, key, BOOK_TABLE_FTS_IDX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public BookTableFtsIdx as(String alias) {
        return new BookTableFtsIdx(DSL.name(alias), this);
    }

    @Override
    public BookTableFtsIdx as(Name alias) {
        return new BookTableFtsIdx(alias, this);
    }

    @Override
    public BookTableFtsIdx as(Table<?> alias) {
        return new BookTableFtsIdx(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTableFtsIdx rename(String name) {
        return new BookTableFtsIdx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTableFtsIdx rename(Name name) {
        return new BookTableFtsIdx(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookTableFtsIdx rename(Table<?> name) {
        return new BookTableFtsIdx(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, Object, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Object, ? super Object, ? super Object, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Object, ? super Object, ? super Object, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
